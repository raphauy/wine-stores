generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STORE_OWNER
  STORE_ADMIN
  GUEST
}

model User {
  id              String    @id @default(cuid())
  name            String?                       // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole  @default(GUEST)     // gennext: show.column
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  store           Store?          @relation("StoreUsers", fields: [storeId], references: [id]) 
  storeId         String?
  
  ownedStores     Store[]         @relation("StoreOwner")  
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

model Store {
  id            String @id @default(cuid())
  name          String                     // gennext: show.column
  slug          String @unique             // gennext: show.column
  image         String?                    // gennext: show.column
  description   String?                    // gennext: show.column
  igHandle      String?                    // gennext: show.column

  createdAt DateTime @default(now())           // gennext: skip.zod
  updatedAt DateTime @updatedAt                // gennext: skip.zod

  owner         User?  @relation("StoreOwner", fields: [ownerId], references: [id])  // gennext: skip.list
  ownerId       String?

  users         User[] @relation("StoreUsers")            // gennext: skip.list
  categories    Category[] @relation("StoreToCategory")   // gennext: skip.list
  products      Product[]  @relation("StoreToProduct")    // gennext: skip.list
  orders        Order[]     @relation("StoreToOrder")     // gennext: skip.list
}

model Category {
  id          String    @id @default(cuid())
  name        String                                      // gennext: show.column

  createdAt   DateTime    @default(now())                 // gennext: skip.zod
  updatedAt   DateTime    @updatedAt                      // gennext: skip.zod

  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId     String      

  products    Product[]   @relation("CategoryToProduct")   // gennext: skip.list

  @@index([storeId])                                     // gennext: show.list skip.zod
}

model Product {
  id          String    @id @default(cuid())
  name        String                                      // gennext: show.column
  description String?
  price       Float                                       // gennext: show.column
  isFeatured  Boolean   @default(false)                   // gennext: show.column
  isArchived  Boolean   @default(false)                   // gennext: show.column

  createdAt   DateTime    @default(now())                 // gennext: skip.zod
  updatedAt   DateTime    @updatedAt                      // gennext: skip.zod

  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])

  images      Image[]                           // gennext: skip.list
  orderItems  OrderItem[]                       // gennext: skip.list

  @@index([storeId])                            // gennext: show.list skip.zod
  @@index([categoryId])                         // gennext: show.list skip.zod
}

model Order {
  id          String    @id @default(cuid())
  isPaid      Boolean   @default(false)                // gennext: show.column
  phone       String    @default("")                   // gennext: show.column
  address     String    @default("")                   // gennext: show.column

  createdAt   DateTime    @default(now())             // gennext: skip.zod
  updatedAt   DateTime    @updatedAt                  // gennext: skip.zod

  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId     String    

  orderItems  OrderItem[]                              // gennext: skip.list

  @@index([storeId])                                  // gennext: show.list skip.zod
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id          String    @id @default(cuid())

  order       Order   @relation(fields: [orderId], references: [id])
  orderId     String  

  product     Product @relation(fields: [productId], references: [id])
  productId   String  // Foreign Key to Product

  @@index([orderId])                            // gennext: show.list skip.zod
  @@index([productId])                          // gennext: show.list skip.zod
}


model Image {
  id          String    @id @default(cuid())
  url         String                             // gennext: show.column

  createdAt   DateTime    @default(now())        // gennext: skip.zod
  updatedAt   DateTime    @updatedAt             // gennext: skip.zod

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String

  @@index([productId])                           // gennext: show.list skip.zod
}
