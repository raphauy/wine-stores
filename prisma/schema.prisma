generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STORE_OWNER
  STORE_ADMIN
  CLIENT
}

model User {
  id              String    @id @default(cuid())
  name            String?                       // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole  @default(CLIENT)     // gennext: show.column
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  store           Store?          @relation("StoreUsers", fields: [storeId], references: [id]) 
  storeId         String?
  
  ownedStores     Store[]         @relation("StoreOwner")  
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

model Store {
  id            String @id @default(cuid())
  name          String                     // gennext: show.column
  slug          String @unique             // gennext: show.column
  image         String?                    // gennext: show.column
  description   String?                    // gennext: show.column
  igHandle      String?                    // gennext: show.column

  mpRedirectUrl String?                    // gennext: show.column
  mpMarketplaceFee Float @default(10)      // gennext: show.column

  emailFrom     String?
  emailConfirmationHtml   String?

  createdAt DateTime @default(now())           // gennext: skip.zod
  updatedAt DateTime @updatedAt                // gennext: skip.zod

  owner         User?  @relation("StoreOwner", fields: [ownerId], references: [id])  // gennext: skip.list
  ownerId       String?

  users         User[] @relation("StoreUsers")            // gennext: skip.list
  categories    Category[] @relation("StoreToCategory")   // gennext: skip.list
  products      Product[]  @relation("StoreToProduct")    // gennext: skip.list
  orders        Order[]     @relation("StoreToOrder")     // gennext: skip.list

  oauth         Oauth[]

  inventoryItems InventoryItem[]
  bankData      BankData[]
}

model Category {
  id          String    @id @default(cuid())
  name        String                                      // gennext: show.column
  slug        String                                      // gennext: show.column

  createdAt   DateTime    @default(now())                 // gennext: skip.zod
  updatedAt   DateTime    @updatedAt                      // gennext: skip.zod

  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId     String      

  products    Product[]   @relation("CategoryToProduct")   // gennext: skip.list

  @@index([storeId])                                     // gennext: show.list skip.zod
}

model Product {
  id          String    @id @default(cuid())
  name        String                                      // gennext: show.column
  slug        String                                      // gennext: show.column
  description String?
  price       Float                                       // gennext: show.column
  isFeatured  Boolean   @default(false)                   // gennext: show.column
  isArchived  Boolean   @default(false)                   // gennext: show.column

  createdAt   DateTime    @default(now())                 // gennext: skip.zod
  updatedAt   DateTime    @updatedAt                      // gennext: skip.zod

  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])

  images      Image[]                           // gennext: skip.list
  orderItems  OrderItem[]                       // gennext: skip.list

  inventoryItem   InventoryItem?
  inventoryItemId String? @unique

  @@index([storeId])                            // gennext: show.list skip.zod
  @@index([categoryId])                         // gennext: show.list skip.zod
}

enum PaymentMethod {
  MercadoPago
  TransferenciaBancaria
  RedesDeCobranza
}

enum OrderStatus {
  Created
  Pending
  PaymentSent
  Paid
  Packing
  Delivered
  Refunded
  Cancelled
}

model Order {
  id            String    @id @default(cuid())
  status        OrderStatus   @default(Created)          // gennext: show.column
  email         String                                   // gennext: show.column
  phone         String                                   // gennext: show.column
  address       String                                   // gennext: show.column

  paymentMethod PaymentMethod                            // gennext: show.column

  createdAt     DateTime    @default(now())              // gennext: skip.zod
  updatedAt     DateTime    @updatedAt                   // gennext: skip.zod

  store         Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId       String    

  orderItems  OrderItem[]                              // gennext: skip.list

  @@index([storeId])                                  // gennext: show.list skip.zod
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id            String    @id @default(cuid())

  quantity      Int       @default(1)                    // gennext: show.column
  soldUnitPrice Float?    @default(0)                   // gennext: show.column
  soldName      String?   @default("")                  // gennext: show.column
  soldCategory  String?   @default("")                  // gennext: show.column
  soldImage     String?   @default("")                  // gennext: show.column

  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String  

  product       Product    @relation(fields: [productId], references: [id])
  productId     String

  @@index([orderId])                            // gennext: show.list skip.zod
  @@index([productId])                          // gennext: show.list skip.zod
}


model Image {
  id          String    @id @default(cuid())
  url         String                             // gennext: show.column

  createdAt   DateTime    @default(now())        // gennext: skip.zod
  updatedAt   DateTime    @updatedAt             // gennext: skip.zod

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String

  @@index([productId])                           // gennext: show.list skip.zod
}

model Oauth {
  id                  String    @id @default(cuid())
  provider            String    // gennext: show.column
  codeVerifier        String // gennext: show.column
  codeChallenge       String 
  codeChallengeMethod String    // gennext: show.column
  
  accessToken         String?   // gennext: show.column
  refreshToken        String?   // gennext: show.column
  expiresAt           DateTime? // gennext: show.column

  userId              String?   // gennext: show.column

  createdAt   DateTime    @default(now())        // gennext: skip.zod
  updatedAt   DateTime    @updatedAt             // gennext: skip.zod

  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
}

enum MovementType {
  ENTRADA   // Indica un ingreso de stock
  SALIDA  // Indica una salida de stock
}

model InventoryItem {
  id          String    @id @default(cuid())
  quantity    Int       @default(0)              // gennext: show.column

  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @unique
 
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String

  stockMovements StockMovement[] @relation("StockToInventoryItem")

  createdAt   DateTime    @default(now())        // gennext: skip.zod
  updatedAt   DateTime    @updatedAt             // gennext: skip.zod
}

model StockMovement {
  id          String    @id @default(cuid())
  type        MovementType                       // gennext: show.column
  quantity    Int                                // gennext: show.column
  comment     String?                            // gennext: show.column

  inventoryItem InventoryItem @relation("StockToInventoryItem", fields: [inventoryItemId], references: [id])
  inventoryItemId String

  createdAt   DateTime    @default(now())        // gennext: skip.zod
  updatedAt   DateTime    @updatedAt             // gennext: skip.zod
}

model BankData {
  id          String    @id @default(cuid())
  name        String                                      // gennext: show.column
  info        String                                      // gennext: show.column

  createdAt   DateTime    @default(now())                 // gennext: skip.zod
  updatedAt   DateTime    @updatedAt                      // gennext: skip.zod

  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
}